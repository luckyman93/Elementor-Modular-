.e-container {
	// Set to initial values in order to avoid inheritance which might cause unexpected behavior.
	--border-radius: 0;
	--display: flex;
	--flex-direction: column;
	--flex-basis: auto;
	--flex-grow: 0;
	--flex-shrink: 1;
	// Use the width from `Site Settings` or default to 1140px.
	// Take the smaller value in order to fix bug ED-6712 where the content-width (AKA "padding hack", see below)
	// isn't working properly.
	--content-width: Min( 100%, var( --container-max-width, 1140px ) );
	--width: 100%;
	--min-height: initial;
	--height: auto;
	--text-align: initial;
	--margin-top: 0;
	--margin-right: 0;
	--margin-bottom: 0;
	--margin-left: 0;
	--padding-top: var( --container-default-padding, 0px );
	--padding-right: var( --container-default-padding, 0px );
	--padding-bottom: var( --container-default-padding, 0px );
	--padding-left: var( --container-default-padding, 0px );
	--position: relative;
	--z-index: revert;
	--overflow: visible;
	--transition: 0;
	--gap: var( --widgets-spacing, 20px ); // Use the gap from `Site Settings` or default to 20px.

	--overlay-mix-blend-mode: initial;
	--overlay-opacity: 1;
	--overlay-transition: 0;

	position: var( --position );
	display: var( --display );
	text-align: var( --text-align );
	flex-direction: var( --flex-direction );
	flex: var( --flex-grow ) var( --flex-shrink ) var( --flex-basis );
	width: var( --width );
	// Set `min-width` to fix nested Containers shrink bug (ED-4964).
	// Ref: https://stackoverflow.com/questions/43934648/how-to-make-flexbox-items-shrink-correctly-when-in-a-nested-container
	min-width: 0;
	// Use the `min()` function to fix cases when a top-level Container is 100% width due to `max-width: 100%;`,
	// or cases when a nested Container overflows the parent Container due to `max-width: 1140px;`.
	// Capital `M` in order to use the CSS function and not the SCSS one.
	max-width: Min( 100%, var( --width ) );
	min-height: var( --min-height );
	height: var( --height );
	border-radius: var( --border-radius );
	margin: var( --margin-top ) var( --margin-right ) var( --margin-bottom ) var( --margin-left );
	// Custom content-width hack.
	padding-left: calc( ( 100% - var( --content-width ) ) / 2 + var( --padding-left ) );
	padding-right: calc( ( 100% - var( --content-width ) ) / 2 + var( --padding-right ) );
	padding-top: var( --padding-top );
	padding-bottom: var( --padding-bottom );
	z-index: var( --z-index );
	overflow: var( --overflow );
	transition: var( --transition );

	// Default top-level containers to be centered.
	:is( .elementor-section-wrap, [data-elementor-id] ) > & {
		--margin-right: auto;
		--margin-left: auto;
	}

	.elementor-empty-view {
		position: relative;
		width: 100%;
		height: 100%;
		// Use the Container's `min-height` or default to 100px.
		min-height: var( --min-height, 100px );

		.elementor-first-add {
			width: auto;
			height: auto;
			inset: 10px;
		}
	}

	.elementor-widget-placeholder {
		--size: 10px;
		--margin-start: calc( -1 * var( --size ) );
		--margin-end: calc( -2 * var( --size ) );

		flex-shrink: 0;
		align-self: stretch;
		z-index: $first-layer;
		pointer-events: none; // Prevent the placeholder from blocking the drop area.
	}

	&.e-container--row {
		& > .elementor-widget-placeholder {
			position: relative;
			z-index: $editor-layer; // To put it above the element overlay.
			width: var( --size );
			// To make sure that it doesn't push & break the layout when appearing.
			margin-inline-start: var( --margin-start );
			height: auto;
			min-height: 100%;
			animation-name: dnd-placeholder-widget-vertical;
			animation-fill-mode: both;
		}

		// Fix nested Containers DnD issues (ED-5424).
		&[data-nesting-level]:not( [data-nesting-level = "0"] ) {
			// Any placeholder which is not on first widget.
			> .elementor-widget-placeholder {
				margin-inline-end: 0;
				margin-inline-start: calc( var( --margin-start ) + var( --margin-end ) );
			}

			// Placeholder on first widget.
			> :not( .elementor-element ) + .elementor-widget-placeholder {
				margin-inline-end: var( --margin-end );
				margin-inline-start: var( --margin-start );
			}
		}
	}

	&.e-container--column > .elementor-widget-placeholder {
		height: var( --size );
		// To make sure that it doesn't push & break the layout when appearing.
		margin-block-start: var( --margin-start );
		margin-block-end: var( --margin-end );
		animation-name: dnd-placeholder-widget-horizontal;

		// Hack to fix placeholder placement in Chrome when it's last (ED-5486).
		&:nth-last-child( 2 ) {
			margin-block-start: calc( 2 * var( --margin-start ) );
			--margin-end: 0;
		}
	}

	// Extracted from the inline CSS of `behaviors/sortable.js`.
	.elementor-sortable-helper {
		height: 84px;
		width: 125px;
		z-index: -1;
	}

	// Hack to increase specificity and avoid using `!important`.
	.elementor-widget.elementor-widget {
		// Override the default margin-bottom of widgets.
		margin-bottom: 0;
	}

	// Background overlay.
	&::before {
		// Render the background overlay only if it's being used - Determined by passing a CSS var from the background
		// control with an empty string (e.g. `--background-overlay: '';`).
		content: var( --background-overlay );
		display: block;
		position: absolute;
		z-index: 0;
		width: 100%;
		height: 100%;
		left: 0;
		top: 0;
		mix-blend-mode: var( --overlay-mix-blend-mode );
		opacity: var( --overlay-opacity );
		transition: var( --overlay-transition );
		border-radius: var( --border-radius );
	}

	.elementor-widget {
		// Fix swiper-based widgets (ED-6716).
		// Since the default is `min-width: auto` for flex items.
		min-width: 0;

		// Fix iframe-based widgets (ED-5338).
		// TODO: Find a better solution.
		&-video,
		&-google_maps {
			flex-basis: 100%;
		}

		// Fix swiper-based widgets broken (ED-6849).
		// TODO: Use `:has( .swiper-container )` selector when available && remove this class from `frontend/utils/swiper.js`.
		&.e-widget-swiper {
			max-width: 100%;
			flex-basis: 100%;
		}
	}

	// Inner Container handle.
	// TODO: Find a better solution.
	& > &, .elementor-widget & {
		> .elementor-element-overlay {
			.elementor-editor-element-setting {
				position: relative;
				background-color: $editor-darker;

				&:hover {
					background-color: $editor-darkest;
				}

				// Hide any unwanted setting controls.
				&.elementor-editor-element-add,
				&.elementor-editor-element-edit + .elementor-editor-element-remove,
				&:first-child::before,
				&:last-child::after {
					display: none;
				}

				// Extended actions ("editing handles").
				&:not( .elementor-editor-element-edit ) {
					margin-inline-start: -25px;
					z-index: -1;
					transition: .3s all;
					will-change: margin-inline-start;
				}
			}

			> .elementor-editor-element-settings:hover {
				> :is( .elementor-editor-element-duplicate, .elementor-editor-element-remove ) {
					margin-inline-start: 0;
				}
			}

			.elementor-editor-element-settings {
				inset: initial;
				transform: none;
				inset-inline-start: 0;
				top: 0;
				border-radius: 0;
				border-end-end-radius: 3px;
				height: auto;
				background-color: $editor-darker;

				&:hover {
					background-color: $editor-darkest;
				}

				// Replace the edit eicon with Container eicon.
				i.eicon-handle::before {
					content: '\e9b4'; // eicon-inner-container.
					font-size: 20px;
					display: block;
					padding: 2px;
				}
			}
		}
	}
}

@media ( max-width: $editor-screen-sm-max ) {
	.e-container {
		--width: 100%;
		--flex-wrap: wrap;
	}
}

@keyframes dnd-placeholder-widget-vertical {
	0% {
		transform-origin: 0 50%;
		transform: translateX( 50% ) scaleX( 0 );
		opacity: 0;
	}

	100% {
		transform-origin: 0 50%;
		transform: translateX( 50% ) scaleX( 1 );
		opacity: .9;
	}
}

@keyframes dnd-placeholder-widget-horizontal {
	0% {
		transform-origin: 50% 0;
		transform: scaleY( 0 );
		opacity: 0;
	}

	100% {
		transform-origin: 50% 0;
		transform: scaleY( 1 );
		opacity: .9;
	}
}
